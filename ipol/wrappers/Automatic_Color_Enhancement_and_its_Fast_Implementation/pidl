#!/usr/bin/python3

IPOL_CACHE = "/home/coco/.cache/ipol"
BUILD_SCRIPT_NAME = "_ipol_build_script.sh"
CALL_SCRIPT_NAME = "_ipol_call_script.sh"

def fail(msg):
	import sys
	print("ERROR: %s" %s)
	sys.exit(1)


def ipol_parse_idl(f):
	"""
	Read an IPOL interface description from file "f"
	"""

	# tree with the parsed information
	p = {}

	# current config section
	c = None
	textual_sections = ("build", "run")

	# parse the input file into the tree "p"
	for k in open(f, "r").read().split("\n"):
		k = k.partition("#")[0].strip()
		if len(k) < 2: continue
		if len(k) > 3 and k[0] == "[" and k[-1] == "]":
			c = k[1:-1]
			p[c] =  [] if c in textual_sections else {}
		else:
			if c in textual_sections:
				p[c].append(k)
			else:
				key = k.partition("=")[0].strip()
				val = k.partition("=")[2].strip()
				p[c][key] = val

	return p


def ipol_build_interface(p):
	print("building interface \"%s\"" % p)
	name = p['info']['name']
	srcurl = p['info']['src']
	print("get \"%s\" code from \"%s\"" % (name,srcurl))
	mycache = "%s/%s" % (IPOL_CACHE, name)
	print("cache = \"%s\"" % mycache)
	import shutil, os
	if os.path.exists(mycache):
		shutil.rmtree(mycache)
	os.makedirs(mycache)
	os.makedirs("%s/dl" % mycache)
	os.makedirs("%s/src" % mycache)
	os.makedirs("%s/bin" % mycache)
	os.makedirs("%s/tmp" % mycache)

	import sys
	if sys.version_info[0] == 2:
		from urllib import urlretrieve
	else:
		from urllib.request import urlretrieve

	mysrc = "%s/dl/src.tar.gz" % mycache
	urlretrieve(srcurl, mysrc)
	shutil.unpack_archive(mysrc, "%s/src" % mycache)

	l = os.listdir("%s/src" % mycache)
	if len(l) != 1:
		fail("more than one file! %s" % l)
	srcdir = "%s/src/%s" % (mycache, l[0])
	bindir = "%s/bin" % mycache
	os.chdir(srcdir)
	buildscript = "%s/%s" % (srcdir, BUILD_SCRIPT_NAME)
	with open(buildscript, "w") as f:
		f.write("export BIN=%s\n" % bindir)
		f.writelines(["%s\n" % i  for i in p['build']])
	import subprocess
	subprocess.run(". %s" % buildscript, shell=True)

def get_random_key():
	import uuid
	return uuid.uuid4().hex.upper()


def ipol_call_interface(outie, p, args):
	print("calling interface \"%s\"" % p)
	name = p['info']['name']
	mycache = "%s/%s" % (IPOL_CACHE, name)
	bindir = "%s/bin" % mycache
	print("cache = \"%s\"" % mycache)

	key = get_random_key()
	print("key = %s" % key)
	tmpdir = "%s/tmp/%s" % (mycache, key)
	import os
	os.makedirs(tmpdir)
	os.chdir(tmpdir)
	callscript = "%s/%s" % (tmpdir, CALL_SCRIPT_NAME)
	with open(callscript, "w") as f:
		f.write("export PATH=%s:$PATH\n" % bindir)
		f.write("export in=%s\n" % args[0])
		f.write("export out=%s\n" % outie[0])
		f.writelines(["%s\n" % i  for i in p['run']])



p = ipol_parse_idl("idl.txt")
#ipol_build_interface(p)
ipol_call_interface(["/home/coco/xxx.png"], p, ["/tmp/lenac.png"])

# vim: sw=8 ts=8 sts=0 noexpandtab:
